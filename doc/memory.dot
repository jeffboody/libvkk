// Copyright (c) 2021 Jeff Boody
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// sudo apt-get install graphviz
// xdot memory.dot
digraph MEMORY
{
	label="Memory";
	fontsize=20;
	size="3,1";
	ratio=fill;

	APP                           [fillcolor=green, style=filled];
	vkk_memory_t                  [shape=box, fillcolor=royalblue, style=filled, label="vkk_memory_t\nchunk\noffset"];
	vkk_memory_delete             [fillcolor=royalblue, style=filled, label="vkk_memory_delete"];
	vkk_memory_new                [fillcolor=royalblue, style=filled, label="vkk_memory_new"];
	vkk_memoryChunk_t             [shape=box, fillcolor=skyblue, style=filled, label="vkk_memoryChunk_t\npool\nlocked\nslot\nusecount\nmemory\ncc_list_t* slots"];
	vkk_memoryChunk_new           [fillcolor=skyblue, style=filled, label="vkk_memoryChunk_new(pool)"];
	vkk_memoryChunk_slots         [fillcolor=skyblue, style=filled, label="vkk_memoryChunk_slots(self)\nfreed + unallocated slots"];
	vkk_memoryChunk_alloc         [fillcolor=skyblue, style=filled, label="memory = vkk_memoryChunk_alloc(self)"];
	vkk_memoryChunk_free          [fillcolor=skyblue, style=filled, label="vkk_memoryChunk_free(self, shutdown, _memory)\nfreed when (usecount == 0)"];
	vkk_memoryChunk_delete        [fillcolor=skyblue, style=filled, label="vkk_memoryChunk_delete"];
	vkk_memoryPool_t              [shape=box, fillcolor=cyan, style=filled, label="vkk_memoryPool_t\nmm\ncount\nstride\nmt_index\ncc_list_t* chunks"];
	vkk_memoryPool_new            [fillcolor=cyan, style=filled, label="vkk_memoryPool_new(mm, count, stride, mt_index)"];
	vkk_memoryPool_alloc          [fillcolor=cyan, style=filled, label="memory = vkk_memoryPool_alloc(self)"];
	vkk_memoryPool_free           [fillcolor=cyan, style=filled, label="vkk_memoryPool_free(self, shutdown, _memory, _chunk)\nfreed when (size(chunks) == 0)"];
	vkk_memoryPool_delete         [fillcolor=cyan, style=filled, label="vkk_memoryPool_delete(_self)"];
	vkk_memoryManager_t           [shape=box, fillcolor=aquamarine, style=filled, label="vkk_memoryManager_t\nengine\nshutdown\ncc_map_t* pools\ncount_chunks\ncount_slots\nsize_chunks\nsize_slots\nmanager_mutex\nchunk_mutex\nchunk_cond"];
	vkk_memoryManager_alloc       [fillcolor=aquamarine, style=filled, label="vkk_memoryManager_alloc(self, mr)\nLOCK_MANAGER\npool = find(pools) or pool = vkk_memoryPool_new\nLOCK_POOL\nvkk_memoryPool_alloc\nUNLOCK_POOL\nUNLOCK_MANAGER"];
	vkk_memoryManager_allocImage  [fillcolor=aquamarine, style=filled, label="vkk_memoryManager_allocImage(self, image)\nvkGetImageMemoryRequirements\nvkk_memoryManager_alloc\nvkBindImageMemory"];
	vkk_memoryManager_allocBuffer [fillcolor=aquamarine, style=filled, label="vkk_memoryManager_allocBuffer(self, buffer, size, buf)\nvkGetBufferMemoryRequirements\nvkk_memoryManager_alloc\nvkk_memoryManager_update\nvkBindBufferMemory"];
	vkk_memoryManager_free        [fillcolor=aquamarine, style=filled, label="vkk_memoryManager_free(self, _memory)\nLOCK_MANAGER\nLOCK_POOL\nvkk_memoryPool_free\nUNLOCK_POOL\nUNLOCK_MANAGER\nvkk_memoryChunk_delete\nvkk_memoryPool_delete"];
	vkk_memoryManager_update      [fillcolor=aquamarine, style=filled, label="vkk_memoryManager_update(self, memory, size, buf)\nLOCK_CHUNK\nvkMapMemory\nmemcpy\nvkUnmapMemory\nUNLOCK_CHUNK"];
	vkBindImageMemory             [fillcolor=palegreen,  style=filled];
	vkBindBufferMemory            [fillcolor=palegreen,  style=filled];
	vkAllocateMemory              [fillcolor=palegreen,  style=filled];
	vkFreeMemory                  [fillcolor=palegreen,  style=filled];
	vkMapMemory                   [fillcolor=palegreen,  style=filled];
	vkUnmapMemory                 [fillcolor=palegreen,  style=filled];
	vkGetBufferMemoryRequirements [fillcolor=palegreen,  style=filled];
	vkGetImageMemoryRequirements  [fillcolor=palegreen,  style=filled];

	vkk_memory_t        -> vkk_memoryChunk_t   [label="slot"];
	vkk_memoryChunk_t   -> vkk_memoryPool_t    [label="chunk"];
	vkk_memoryPool_t    -> vkk_memoryChunk_t   [label="pool"];
	vkk_memoryPool_t    -> vkk_memoryManager_t [label="pool"];
	vkk_memoryManager_t -> vkk_memoryPool_t    [label="mm"];

	APP                           -> vkk_memoryManager_allocImage;
	APP                           -> vkk_memoryManager_allocBuffer;
	APP                           -> vkk_memoryManager_free;
	APP                           -> vkk_memoryManager_update;
	vkk_memoryManager_free        -> vkk_memoryPool_free;
	vkk_memoryManager_free        -> vkk_memoryPool_delete         [label="if(free)"];
	vkk_memoryManager_free        -> vkk_memoryChunk_delete        [label="if(chunk)"];
	vkk_memoryPool_free           -> vkk_memoryChunk_free;
	vkk_memoryChunk_free          -> vkk_memory_delete             [label="if(shutdown or append fails)"];
	vkk_memoryChunk_delete        -> vkk_memory_delete             [label="foreach(slot)"];
	vkk_memoryChunk_delete        -> vkFreeMemory;
	vkk_memoryManager_alloc       -> vkk_memoryPool_new            [label="a"];
	vkk_memoryManager_alloc       -> vkk_memoryPool_alloc          [label="b"];
	vkk_memoryManager_allocBuffer -> vkGetBufferMemoryRequirements [label="a"];
	vkk_memoryManager_allocBuffer -> vkk_memoryManager_alloc       [label="b"];
	vkk_memoryManager_allocBuffer -> vkk_memoryManager_update      [label="c"];
	vkk_memoryManager_allocBuffer -> vkBindBufferMemory            [label="d"];
	vkk_memoryManager_allocImage  -> vkGetImageMemoryRequirements  [label="a"];
	vkk_memoryManager_allocImage  -> vkk_memoryManager_alloc       [label="b"];
	vkk_memoryManager_allocImage  -> vkBindImageMemory             [label="c"];
	vkk_memoryManager_update      -> vkMapMemory;
	vkk_memoryManager_update      -> vkUnmapMemory;
	vkk_memoryPool_alloc          -> vkk_memoryChunk_new;
	vkk_memoryChunk_new           -> vkAllocateMemory;
	vkk_memoryPool_alloc          -> vkk_memoryChunk_slots;
	vkk_memoryPool_alloc          -> vkk_memoryChunk_alloc;
	vkk_memoryChunk_alloc         -> vkk_memory_new;
}
